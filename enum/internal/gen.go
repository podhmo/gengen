//go:buld gen

// Code generated by gen.go.tmpl DO NOT EDIT.
package main

import (
	"fmt"
	"log"

	"github.com/podhmo/gengen/enum"
	"github.com/podhmo/gengen/enum/generator"
	"github.com/podhmo/gengen/enum/generator/load"

	"github.com/podhmo/gengen/enum/internal/sandbox"
)

func run() error {
	g, err := generator.NewGenerator()
	if err != nil {
		return fmt.Errorf("new generator: %w", err)
	}

	// pkg name
	pkg := "gen"
	// input:
	schemas := []enum.Interface{
		sandbox.Op{},
	}

	targets := make([]load.Enum, len(schemas))

	for i, x := range schemas {
		typename := x.EnumName(x)

		b, err := enum.MarshalSchema(x)
		if err != nil {
			return fmt.Errorf("marshal in %v: %w", typename, err)
		}
		dst, err := load.UnmarshalSchema(b)
		if err != nil {
			return fmt.Errorf("unmarshal in %v: %w", typename, err)
		}

		targets[i] = dst
	}

	b, err := g.Emit(pkg, targets)
	if err != nil {
		return fmt.Errorf("emit: %w", err)
	}
	fmt.Println(string(b))
	return nil
}

func main() {
	if err := run(); err != nil {
		log.Fatalf("!! %+v", err)
	}
}

